# Generated by Django 4.2.11 on 2024-03-25 13:38

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='admin_id',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='df_event_stts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('EVENT_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='문화행사명')),
                ('EVENT_PERIOD', models.CharField(blank=True, max_length=100, null=True, verbose_name='문화행사 기간')),
                ('EVENT_PLACE', models.CharField(blank=True, max_length=100, null=True, verbose_name='문화행사 장소')),
                ('EVENT_ETC_DETAIL', models.CharField(blank=True, max_length=100, null=True, verbose_name='문화행사 기타 세부정보')),
                ('EVENT_X', models.CharField(blank=True, max_length=100, null=True, verbose_name='X좌표')),
                ('EVENT_Y', models.CharField(blank=True, max_length=100, null=True, verbose_name='Y좌표')),
            ],
            options={
                'verbose_name_plural': '01.행사정보',
            },
        ),
        migrations.CreateModel(
            name='df_fcst12hours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('FCST_DT', models.CharField(blank=True, max_length=100, null=True, verbose_name='예보시간')),
                ('TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='기온')),
                ('PRECIPITATION', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수량')),
                ('PRECPT_TYPE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수형태')),
                ('RAIN_CHANCE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수확률')),
                ('SKY_STTS', models.CharField(blank=True, max_length=100, null=True, verbose_name='하늘상태')),
                ('FCST_TIME', models.CharField(blank=True, max_length=100, null=True, verbose_name='예측시점')),
            ],
            options={
                'verbose_name_plural': '03.시간별 예상 날씨(12시간)',
            },
        ),
        migrations.CreateModel(
            name='df_fcst24hours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('FCST_DT', models.CharField(blank=True, max_length=100, null=True, verbose_name='예보시간')),
                ('TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='기온')),
                ('PRECIPITATION', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수량')),
                ('PRECPT_TYPE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수형태')),
                ('RAIN_CHANCE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수확률')),
                ('SKY_STTS', models.CharField(blank=True, max_length=100, null=True, verbose_name='하늘상태')),
            ],
            options={
                'verbose_name_plural': '04.시간별 예상 날씨(24시간)',
            },
        ),
        migrations.CreateModel(
            name='df_fcst_ppltn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('FCST_TIME', models.CharField(blank=True, max_length=100, null=True, verbose_name='예측시점')),
                ('FCST_CONGEST_LVL', models.CharField(blank=True, max_length=100, null=True, verbose_name='장소 예측 혼잡도 지표')),
                ('FCST_PPLTN_MIN', models.DecimalField(decimal_places=0, max_digits=12, verbose_name='예측 실시간 인구 지표 최소값')),
                ('FCST_PPLTN_MAX', models.DecimalField(decimal_places=0, max_digits=12, verbose_name='예측 실시간 인구 지표 최대값')),
            ],
            options={
                'verbose_name_plural': '02.시간별 인구 예상',
            },
        ),
        migrations.CreateModel(
            name='df_live_ppltn_stts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('AREA_CONGEST_LVL', models.CharField(blank=True, max_length=100, null=True, verbose_name='장소 혼잡도 지표')),
                ('AREA_CONGEST_MSG', models.CharField(blank=True, max_length=100, null=True, verbose_name='장소 혼잡도 지표 관련 메세지')),
                ('AREA_PPLTN_MIN', models.CharField(blank=True, max_length=100, null=True, verbose_name='실시간 인구 지표 최소값')),
                ('AREA_PPLTN_MAX', models.CharField(blank=True, max_length=100, null=True, verbose_name='실시간 인구 지표 최대값')),
                ('MALE_PPLTN_RATE', models.CharField(blank=True, max_length=100, null=True, verbose_name='남성 인구 비율(남성)')),
                ('FEMALE_PPLTN_RATE', models.CharField(blank=True, max_length=100, null=True, verbose_name='여성 인구 비율(여성)')),
                ('PPLTN_RATE_0', models.CharField(blank=True, max_length=100, null=True, verbose_name='0~10세 인구 비율')),
                ('PPLTN_RATE_10', models.CharField(blank=True, max_length=100, null=True, verbose_name='10대 실시간 인구 비율')),
                ('PPLTN_RATE_20', models.CharField(blank=True, max_length=100, null=True, verbose_name='20대 실시간 인구 비율')),
                ('PPLTN_RATE_30', models.CharField(blank=True, max_length=100, null=True, verbose_name='30대 실시간 인구 비율')),
                ('PPLTN_RATE_40', models.CharField(blank=True, max_length=100, null=True, verbose_name='40대 실시간 인구 비율')),
                ('PPLTN_RATE_50', models.CharField(blank=True, max_length=100, null=True, verbose_name='50대 실시간 인구 비율')),
                ('PPLTN_RATE_60', models.CharField(blank=True, max_length=100, null=True, verbose_name='60대 실시간 인구 비율')),
                ('PPLTN_RATE_70', models.CharField(blank=True, max_length=100, null=True, verbose_name='70대 실시간 인구 비율')),
                ('RESNT_PPLTN_RATE', models.CharField(blank=True, max_length=100, null=True, verbose_name='상주 인구 비율')),
                ('NON_RESNT_PPLTN_RATE', models.CharField(blank=True, max_length=100, null=True, verbose_name='비상주 인구 비율')),
                ('REPLACE_YN', models.CharField(blank=True, max_length=100, null=True, verbose_name='대체 데이터 여부')),
                ('PPLTN_TIME', models.CharField(blank=True, max_length=100, null=True, verbose_name='실시간 인구 데이터 업데이트 시간')),
                ('FCST_YN', models.CharField(blank=True, max_length=100, null=True, verbose_name='예측값 제공 여부')),
                ('FCST_PPLTN', models.TextField(blank=True, null=True, verbose_name='인구 예측 오브젝트')),
            ],
            options={
                'verbose_name_plural': '05.실시간인구현황',
            },
        ),
        migrations.CreateModel(
            name='df_weather_stts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('WEATHER_TIME', models.CharField(blank=True, max_length=100, null=True, verbose_name='날씨 데이터 업데이트 시간')),
                ('TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='기온')),
                ('SENSIBLE_TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='체감온도')),
                ('MAX_TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='일 최고온도')),
                ('MIN_TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='일 최저온도')),
                ('HUMIDITY', models.CharField(blank=True, max_length=100, null=True, verbose_name='습도')),
                ('WIND_DIRCT', models.CharField(blank=True, max_length=100, null=True, verbose_name='풍향')),
                ('WIND_SPD', models.CharField(blank=True, max_length=100, null=True, verbose_name='풍속')),
                ('PRECIPITATION', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수량')),
                ('PRECPT_TYPE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수형태')),
                ('PCP_MSG', models.TextField(blank=True, null=True, verbose_name='강수관련 메세지')),
                ('SUNRISE', models.CharField(blank=True, max_length=100, null=True, verbose_name='일출시각')),
                ('SUNSET', models.CharField(blank=True, max_length=100, null=True, verbose_name='일몰시각')),
                ('UV_INDEX_LVL', models.CharField(blank=True, max_length=100, null=True, verbose_name='자외선지수 단계')),
                ('UV_INDEX', models.CharField(blank=True, max_length=100, null=True, verbose_name='자외선지수')),
                ('UV_MSG', models.TextField(blank=True, null=True, verbose_name='자외선메세지')),
                ('PM25_INDEX', models.CharField(blank=True, max_length=100, null=True, verbose_name='초미세먼지지표')),
                ('PM25', models.CharField(blank=True, max_length=100, null=True, verbose_name='초미세먼지농도')),
                ('PM10_INDEX', models.CharField(blank=True, max_length=100, null=True, verbose_name='미세먼지지표')),
                ('PM10', models.CharField(blank=True, max_length=100, null=True, verbose_name='미세먼지농도')),
                ('AIR_IDX', models.CharField(blank=True, max_length=100, null=True, verbose_name='통합대기환경등급')),
                ('AIR_IDX_MVL', models.CharField(blank=True, max_length=100, null=True, verbose_name='통합대기환경지수')),
                ('AIR_IDX_MAIN', models.CharField(blank=True, max_length=100, null=True, verbose_name='통합대기환경지수 결정물질')),
                ('AIR_MSG', models.TextField(blank=True, null=True, verbose_name='통합대기환경등급별 메세지')),
                ('FCST24HOURS', models.TextField(blank=True, null=True, verbose_name='날씨 데이터 업데이트 시간')),
                ('NEWS_LIST', models.TextField(blank=True, null=True, verbose_name='기상관련특보')),
            ],
            options={
                'verbose_name_plural': '06.실시간 날씨',
            },
        ),
        migrations.CreateModel(
            name='Historicaldf_weather_stts',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('WEATHER_TIME', models.CharField(blank=True, max_length=100, null=True, verbose_name='날씨 데이터 업데이트 시간')),
                ('TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='기온')),
                ('SENSIBLE_TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='체감온도')),
                ('MAX_TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='일 최고온도')),
                ('MIN_TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='일 최저온도')),
                ('HUMIDITY', models.CharField(blank=True, max_length=100, null=True, verbose_name='습도')),
                ('WIND_DIRCT', models.CharField(blank=True, max_length=100, null=True, verbose_name='풍향')),
                ('WIND_SPD', models.CharField(blank=True, max_length=100, null=True, verbose_name='풍속')),
                ('PRECIPITATION', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수량')),
                ('PRECPT_TYPE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수형태')),
                ('PCP_MSG', models.TextField(blank=True, null=True, verbose_name='강수관련 메세지')),
                ('SUNRISE', models.CharField(blank=True, max_length=100, null=True, verbose_name='일출시각')),
                ('SUNSET', models.CharField(blank=True, max_length=100, null=True, verbose_name='일몰시각')),
                ('UV_INDEX_LVL', models.CharField(blank=True, max_length=100, null=True, verbose_name='자외선지수 단계')),
                ('UV_INDEX', models.CharField(blank=True, max_length=100, null=True, verbose_name='자외선지수')),
                ('UV_MSG', models.TextField(blank=True, null=True, verbose_name='자외선메세지')),
                ('PM25_INDEX', models.CharField(blank=True, max_length=100, null=True, verbose_name='초미세먼지지표')),
                ('PM25', models.CharField(blank=True, max_length=100, null=True, verbose_name='초미세먼지농도')),
                ('PM10_INDEX', models.CharField(blank=True, max_length=100, null=True, verbose_name='미세먼지지표')),
                ('PM10', models.CharField(blank=True, max_length=100, null=True, verbose_name='미세먼지농도')),
                ('AIR_IDX', models.CharField(blank=True, max_length=100, null=True, verbose_name='통합대기환경등급')),
                ('AIR_IDX_MVL', models.CharField(blank=True, max_length=100, null=True, verbose_name='통합대기환경지수')),
                ('AIR_IDX_MAIN', models.CharField(blank=True, max_length=100, null=True, verbose_name='통합대기환경지수 결정물질')),
                ('AIR_MSG', models.TextField(blank=True, null=True, verbose_name='통합대기환경등급별 메세지')),
                ('FCST24HOURS', models.TextField(blank=True, null=True, verbose_name='날씨 데이터 업데이트 시간')),
                ('NEWS_LIST', models.TextField(blank=True, null=True, verbose_name='기상관련특보')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical df_weather_stts',
                'verbose_name_plural': 'historical 06.실시간 날씨',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Historicaldf_live_ppltn_stts',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('AREA_CONGEST_LVL', models.CharField(blank=True, max_length=100, null=True, verbose_name='장소 혼잡도 지표')),
                ('AREA_CONGEST_MSG', models.CharField(blank=True, max_length=100, null=True, verbose_name='장소 혼잡도 지표 관련 메세지')),
                ('AREA_PPLTN_MIN', models.CharField(blank=True, max_length=100, null=True, verbose_name='실시간 인구 지표 최소값')),
                ('AREA_PPLTN_MAX', models.CharField(blank=True, max_length=100, null=True, verbose_name='실시간 인구 지표 최대값')),
                ('MALE_PPLTN_RATE', models.CharField(blank=True, max_length=100, null=True, verbose_name='남성 인구 비율(남성)')),
                ('FEMALE_PPLTN_RATE', models.CharField(blank=True, max_length=100, null=True, verbose_name='여성 인구 비율(여성)')),
                ('PPLTN_RATE_0', models.CharField(blank=True, max_length=100, null=True, verbose_name='0~10세 인구 비율')),
                ('PPLTN_RATE_10', models.CharField(blank=True, max_length=100, null=True, verbose_name='10대 실시간 인구 비율')),
                ('PPLTN_RATE_20', models.CharField(blank=True, max_length=100, null=True, verbose_name='20대 실시간 인구 비율')),
                ('PPLTN_RATE_30', models.CharField(blank=True, max_length=100, null=True, verbose_name='30대 실시간 인구 비율')),
                ('PPLTN_RATE_40', models.CharField(blank=True, max_length=100, null=True, verbose_name='40대 실시간 인구 비율')),
                ('PPLTN_RATE_50', models.CharField(blank=True, max_length=100, null=True, verbose_name='50대 실시간 인구 비율')),
                ('PPLTN_RATE_60', models.CharField(blank=True, max_length=100, null=True, verbose_name='60대 실시간 인구 비율')),
                ('PPLTN_RATE_70', models.CharField(blank=True, max_length=100, null=True, verbose_name='70대 실시간 인구 비율')),
                ('RESNT_PPLTN_RATE', models.CharField(blank=True, max_length=100, null=True, verbose_name='상주 인구 비율')),
                ('NON_RESNT_PPLTN_RATE', models.CharField(blank=True, max_length=100, null=True, verbose_name='비상주 인구 비율')),
                ('REPLACE_YN', models.CharField(blank=True, max_length=100, null=True, verbose_name='대체 데이터 여부')),
                ('PPLTN_TIME', models.CharField(blank=True, max_length=100, null=True, verbose_name='실시간 인구 데이터 업데이트 시간')),
                ('FCST_YN', models.CharField(blank=True, max_length=100, null=True, verbose_name='예측값 제공 여부')),
                ('FCST_PPLTN', models.TextField(blank=True, null=True, verbose_name='인구 예측 오브젝트')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical df_live_ppltn_stts',
                'verbose_name_plural': 'historical 05.실시간인구현황',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Historicaldf_fcst_ppltn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('FCST_TIME', models.CharField(blank=True, max_length=100, null=True, verbose_name='예측시점')),
                ('FCST_CONGEST_LVL', models.CharField(blank=True, max_length=100, null=True, verbose_name='장소 예측 혼잡도 지표')),
                ('FCST_PPLTN_MIN', models.DecimalField(decimal_places=0, max_digits=12, verbose_name='예측 실시간 인구 지표 최소값')),
                ('FCST_PPLTN_MAX', models.DecimalField(decimal_places=0, max_digits=12, verbose_name='예측 실시간 인구 지표 최대값')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical df_fcst_ppltn',
                'verbose_name_plural': 'historical 02.시간별 인구 예상',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Historicaldf_fcst24hours',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('FCST_DT', models.CharField(blank=True, max_length=100, null=True, verbose_name='예보시간')),
                ('TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='기온')),
                ('PRECIPITATION', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수량')),
                ('PRECPT_TYPE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수형태')),
                ('RAIN_CHANCE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수확률')),
                ('SKY_STTS', models.CharField(blank=True, max_length=100, null=True, verbose_name='하늘상태')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical df_fcst24hours',
                'verbose_name_plural': 'historical 04.시간별 예상 날씨(24시간)',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Historicaldf_fcst12hours',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('FCST_DT', models.CharField(blank=True, max_length=100, null=True, verbose_name='예보시간')),
                ('TEMP', models.CharField(blank=True, max_length=100, null=True, verbose_name='기온')),
                ('PRECIPITATION', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수량')),
                ('PRECPT_TYPE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수형태')),
                ('RAIN_CHANCE', models.CharField(blank=True, max_length=100, null=True, verbose_name='강수확률')),
                ('SKY_STTS', models.CharField(blank=True, max_length=100, null=True, verbose_name='하늘상태')),
                ('FCST_TIME', models.CharField(blank=True, max_length=100, null=True, verbose_name='예측시점')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical df_fcst12hours',
                'verbose_name_plural': 'historical 03.시간별 예상 날씨(12시간)',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Historicaldf_event_stts',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('file_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='수집시간')),
                ('AREA_CD', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 코드명')),
                ('AREA_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='핫스팟 장소명')),
                ('EVENT_NM', models.CharField(blank=True, max_length=100, null=True, verbose_name='문화행사명')),
                ('EVENT_PERIOD', models.CharField(blank=True, max_length=100, null=True, verbose_name='문화행사 기간')),
                ('EVENT_PLACE', models.CharField(blank=True, max_length=100, null=True, verbose_name='문화행사 장소')),
                ('EVENT_ETC_DETAIL', models.CharField(blank=True, max_length=100, null=True, verbose_name='문화행사 기타 세부정보')),
                ('EVENT_X', models.CharField(blank=True, max_length=100, null=True, verbose_name='X좌표')),
                ('EVENT_Y', models.CharField(blank=True, max_length=100, null=True, verbose_name='Y좌표')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical df_event_stts',
                'verbose_name_plural': 'historical 01.행사정보',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
